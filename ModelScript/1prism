

formula obstacleLeftR0 = (x0 = 2 & y0 = 1 & X1Y1_Occupied = true)|(x0 = 2 & y0 = 2 & X1Y2_Occupied = true)|(x0 = 2 & y0 = 3 & X1Y3_Occupied = true)|(x0 = 3 & y0 = 1 & X2Y1_Occupied = true)|(x0 = 3 & y0 = 2 & X2Y2_Occupied = true)|(x0 = 3 & y0 = 3 & X2Y3_Occupied = true); 
formula obstacleRightR0 = (x0 = 1 & y0 = 1 & X2Y1_Occupied = true)|(x0 = 1 & y0 = 2 & X2Y2_Occupied = true)|(x0 = 1 & y0 = 3 & X2Y3_Occupied = true)|(x0 = 2 & y0 = 1 & X3Y1_Occupied = true)|(x0 = 2 & y0 = 2 & X3Y2_Occupied = true)|(x0 = 2 & y0 = 3 & X3Y3_Occupied = true); 
formula obstacleDownR0 = (x0 = 1 & y0 = 2 & X1Y1_Occupied = true)|(x0 = 1 & y0 = 3 & X1Y2_Occupied = true)|(x0 = 2 & y0 = 2 & X2Y1_Occupied = true)|(x0 = 2 & y0 = 3 & X2Y2_Occupied = true)|(x0 = 3 & y0 = 2 & X3Y1_Occupied = true)|(x0 = 3 & y0 = 3 & X3Y2_Occupied = true); 
formula obstacleUpR0 = (x0 = 1 & y0 = 1 & X1Y2_Occupied = true)|(x0 = 1 & y0 = 2 & X1Y3_Occupied = true)|(x0 = 2 & y0 = 1 & X2Y2_Occupied = true)|(x0 = 2 & y0 = 2 & X2Y3_Occupied = true)|(x0 = 3 & y0 = 1 & X3Y2_Occupied = true)|(x0 = 3 & y0 = 2 & X3Y3_Occupied = true);

module robot1

	R0Lock : bool; // lock for clock sync
	x0 : [1..max_grid_id]; // location variables
	y0 : [1..max_grid_id];

	[release] R0Lock = true -> (R0Lock'=false); // release lock according to the sync module
	[R0Move] active_bot = 0 & !R0Lock & x0>1 & !obstacleLeftR0-> (x0'=x0-1) & (R0Lock' = true); // left 
	[R0Move] active_bot = 0 & !R0Lock & x0<max_grid_id & !obstacleRightR0-> (x0'=x0+1) & (R0Lock' = true); // right 
	[R0Move] active_bot = 0 & !R0Lock & y0>1 & !obstacleDownR0-> (y0'=y0-1) & (R0Lock' = true); // down 
	[R0Move] active_bot = 0 & !R0Lock & y0<max_grid_id & !obstacleUpR0-> (y0'=y0+1) & (R0Lock' = true); // up 

	[R0Wait] active_bot = 0 & !R0Lock -> (R0Lock' = true); // wait

	[T0Complete] active_bot = 0 & !R0Lock & T0Active=true & x0=tx0 & y0=ty0-> (R0Lock' = true);

endmodule

formula obstacleLeftR1 = (x1 = 2 & y1 = 1 & X1Y1_Occupied = true)|(x1 = 2 & y1 = 2 & X1Y2_Occupied = true)|(x1 = 2 & y1 = 3 & X1Y3_Occupied = true)|(x1 = 3 & y1 = 1 & X2Y1_Occupied = true)|(x1 = 3 & y1 = 2 & X2Y2_Occupied = true)|(x1 = 3 & y1 = 3 & X2Y3_Occupied = true); 
formula obstacleRightR1 = (x1 = 1 & y1 = 1 & X2Y1_Occupied = true)|(x1 = 1 & y1 = 2 & X2Y2_Occupied = true)|(x1 = 1 & y1 = 3 & X2Y3_Occupied = true)|(x1 = 2 & y1 = 1 & X3Y1_Occupied = true)|(x1 = 2 & y1 = 2 & X3Y2_Occupied = true)|(x1 = 2 & y1 = 3 & X3Y3_Occupied = true); 
formula obstacleDownR1 = (x1 = 1 & y1 = 2 & X1Y1_Occupied = true)|(x1 = 1 & y1 = 3 & X1Y2_Occupied = true)|(x1 = 2 & y1 = 2 & X2Y1_Occupied = true)|(x1 = 2 & y1 = 3 & X2Y2_Occupied = true)|(x1 = 3 & y1 = 2 & X3Y1_Occupied = true)|(x1 = 3 & y1 = 3 & X3Y2_Occupied = true); 
formula obstacleUpR1 = (x1 = 1 & y1 = 1 & X1Y2_Occupied = true)|(x1 = 1 & y1 = 2 & X1Y3_Occupied = true)|(x1 = 2 & y1 = 1 & X2Y2_Occupied = true)|(x1 = 2 & y1 = 2 & X2Y3_Occupied = true)|(x1 = 3 & y1 = 1 & X3Y2_Occupied = true)|(x1 = 3 & y1 = 2 & X3Y3_Occupied = true);

module robot1

	R1Lock : bool; // lock for clock sync
	x1 : [1..max_grid_id]; // location variables
	y1 : [1..max_grid_id];

	[release] R1Lock = true -> (R1Lock'=false); // release lock according to the sync module
	[R1Move] active_bot = 0 & !R1Lock & x1>1 & !obstacleLeftR1-> (x1'=x1-1) & (R1Lock' = true); // left 
	[R1Move] active_bot = 0 & !R1Lock & x1<max_grid_id & !obstacleRightR1-> (x1'=x1+1) & (R1Lock' = true); // right 
	[R1Move] active_bot = 0 & !R1Lock & y1>1 & !obstacleDownR1-> (y1'=y1-1) & (R1Lock' = true); // down 
	[R1Move] active_bot = 0 & !R1Lock & y1<max_grid_id & !obstacleUpR1-> (y1'=y1+1) & (R1Lock' = true); // up 

	[R1Wait] active_bot = 0 & !R1Lock -> (R1Lock' = true); // wait

	[T0Complete] active_bot = 0 & !R1Lock & T1Active=true & x1=tx1 & y1=ty1-> (R1Lock' = true);

endmodule

module task1

	t0Active : bool;
	tx0 : [1..max_grid_id];
	ty1 : [1..max_grid_id];

	[t0Complete] t0Active=true & x1=tx0 & y1=ty1 -> (t0Active' = false);

endmodule

module sync

	active_bot : [0..no_bots];	[release] active_bot = no_bots -> (active_bot'=0);
	[R0Move] true -> (active_bot' = min(active_bot+1, no_bots));
	[R0Wait] true -> (active_bot' = min(active_bot+1, no_bots));
	[R1Move] true -> (active_bot' = min(active_bot+1, no_bots));
	[R1Wait] true -> (active_bot' = min(active_bot+1, no_bots));

	[T0Complete] true -> (active_bot' = min(active_bot+1, no_bots));

endmodule

rewards "time"

	[release] true: 1;

endrewards